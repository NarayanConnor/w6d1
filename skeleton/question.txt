#
select
distinct
from 
join
where
group
having
limit offset
order

from
join
where
group
having
select 
distinct
order
limit offset


# == Schema Information
#
# Table name: nobels
#
#  yr          :integer
#  subject     :string
#  winner      :string

which year physic yes , no chem

select distinct yr
from nobels
where subject = 'physic' AND yr NOT IN (
    select yr
    from nobels
    where subject = 'chem'
)




Describe the differences between a primary key and a foreign key.

Question Three:

Given the following table write all the `belongs_to` and `has_many` **and**
`has_many through` associations for models based on the below table
(`Physician`, `Appointment`, and `Patient`)

```ruby
# == Schema Information
#
# Table name: physicians
#
#  id   :integer          not null, primary key
#  name :string           not null

has_many :appointments
primary_key: :id
foreign_key: :physician_id
class_name: :Appointment

has_many :general_pats
through: :appointments
souce: :patient

has_many :prime_phyc
primary_key: :id
foreign_key: :primary_physician_id
class_name: :Patient

has_many :prime_apoints
through: :prime_phyc
source: :appointments



# Table name: appointments
#
#  id   :integer           not null, primary key
#  physician_id :integer   not null
#  patient_id :integer     not null

belongs_to :physician,
primary_key: :id,
foreign_key: :physician_id,
class_name: :Physician

belongs_to :patient,
primary_key: :id,
foreign_key: :patient_id,
class_name: :Patient

# Table name: patients
#
#  id   :integer           not null, primary key
#  name :string            not null
#  primary_physician_id :integer

has_many appointments
primary_key: :id,
foreign_key: :patient_id
class_name: :Patient

belongs_to :primary_physician
primary_key: :id
foreign_key: :patient_id
class_name: :Patient




 == Schema Information
#
# Table name: users
#
#  id   :integer                not null, primary key
#  name :string                 not null

has_many :enrollments,
primary_key: :id,
foreign_key: :student_id,
class_name: :Enrollment

has_many :teaches,
primary_key: :id,
foreign_key: :professor_id,
class_name: :Course
optional: :true


# Table name: enrollments
#
#  id   :integer                not null, primary key
#  course_id :integer           not null
#  student_id :integer          not null

belongs_to :course,
primary_key: :id,
foreign_key: :course_id,
class_name: :Course

belongs_to :student,
primary_key: :id,
foreign_key: :student_id,
class_name: :User


# Table name: courses
#
#  id   :integer                not null, primary key
#  course_name :string          not null
#  professor_id :integer        not null
#  prereq_course_id :integer    not null

belongs_to :professor,
primary_key: :id,
foreign_key: :professor_id,
class_name: :Users

has_many :enrollments,
primary_key: :id,
foreign_key: :course_id,
class_name: :Enrollment

belongs_to :prereq_course,
primary_key: :id,
foreign_key: :prereq_course_id,
class_name: :Course
optional: :true




two tables 
employ & defpartment
employ can belong to a single department
find all employs who work for a given defpartment
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
select name
from employ
join department
on employ.department_id
where defpartment_name = name

select name
from employ
where employ.department_id is null
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

film where harison has started but not primary
list alpha ord 15 star roles

# Table name: actors
#
#  id          :integer      not null, primary key
#  name        :string
#
# Table name: movies
#
#  id          :integer      not null, primary key
#  title       :string
#
# Table name: castings
#
#  movie_id    :integer      not null, primary key
#  actor_id    :integer      not null, primary key
#  ord         :integer


select movie.title
from movie
join 
    casting On casting.movie_id = movie.id
join 
    actors on casting.actor_id = actor_id
where 
    actor.name='harison' and castings.ord != 1

list alpha ord 15 star roles

select actor.name
from actor
join 
    casting On casting.actor_id = actor.id
where casting.ord = 1
group by actor.id
having count(*)>15
order by actor.name